import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import confetti from 'canvas-confetti';
import * as FiIcons from 'react-icons/fi';
import SafeIcon from '../common/SafeIcon';
import { useMealPlan } from '../context/MealPlanContext';

const { FiShoppingCart, FiCheck, FiX, FiCopy, FiDownload, FiRefreshCw, FiStar } = FiIcons;

const ShoppingList = () => {
  const { getShoppingList, getUpcomingMeals } = useMealPlan();
  const [checkedItems, setCheckedItems] = useState(new Set());
  const [showCopied, setShowCopied] = useState(false);
  const [showCompletionModal, setShowCompletionModal] = useState(false);
  const [hasTriggeredConfetti, setHasTriggeredConfetti] = useState(false);

  const shoppingList = getShoppingList();
  const upcomingMeals = getUpcomingMeals();

  // Check if all items are completed and trigger confetti
  useEffect(() => {
    const allItemsChecked = shoppingList.length > 0 && checkedItems.size === shoppingList.length;
    
    if (allItemsChecked && !hasTriggeredConfetti) {
      setHasTriggeredConfetti(true);
      triggerConfettiCelebration();
      setShowCompletionModal(true);
      
      // Auto-hide modal after 4 seconds
      setTimeout(() => {
        setShowCompletionModal(false);
      }, 4000);
    } else if (!allItemsChecked && hasTriggeredConfetti) {
      setHasTriggeredConfetti(false);
    }
  }, [checkedItems, shoppingList.length, hasTriggeredConfetti]);

  const triggerConfettiCelebration = () => {
    // Multiple confetti bursts for dramatic effect
    const duration = 3000;
    const animationEnd = Date.now() + duration;
    
    const randomInRange = (min, max) => {
      return Math.random() * (max - min) + min;
    };

    const interval = setInterval(() => {
      const timeLeft = animationEnd - Date.now();

      if (timeLeft <= 0) {
        clearInterval(interval);
        return;
      }

      const particleCount = 150 * (timeLeft / duration);

      // Left side burst
      confetti({
        particleCount,
        angle: 60,
        spread: 55,
        origin: { x: 0, y: 0.8 },
        colors: ['#f97316', '#ea580c', '#dc2626', '#16a34a', '#059669', '#0891b2']
      });

      // Right side burst  
      confetti({
        particleCount,
        angle: 120,
        spread: 55,
        origin: { x: 1, y: 0.8 },
        colors: ['#f97316', '#ea580c', '#dc2626', '#16a34a', '#059669', '#0891b2']
      });

      // Center burst
      confetti({
        particleCount: particleCount / 2,
        angle: 90,
        spread: 70,
        origin: { x: 0.5, y: 0.6 },
        colors: ['#f97316', '#ea580c', '#dc2626', '#16a34a', '#059669', '#0891b2']
      });
    }, 250);

    // Final big burst
    setTimeout(() => {
      confetti({
        particleCount: 200,
        spread: 100,
        origin: { y: 0.6 },
        colors: ['#f97316', '#ea580c', '#dc2626', '#16a34a', '#059669', '#0891b2']
      });
    }, 1000);
  };

  const toggleItem = (itemName) => {
    const newCheckedItems = new Set(checkedItems);
    if (newCheckedItems.has(itemName)) {
      newCheckedItems.delete(itemName);
    } else {
      newCheckedItems.add(itemName);
    }
    setCheckedItems(newCheckedItems);
  };

  const clearChecked = () => {
    setCheckedItems(new Set());
  };

  const copyToClipboard = async () => {
    const listText = shoppingList
      .map(item => `${item.quantity} ${item.unit} ${item.name}`)
      .join('\n');

    try {
      await navigator.clipboard.writeText(listText);
      setShowCopied(true);
      setTimeout(() => setShowCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy to clipboard:', err);
    }
  };

  const downloadList = () => {
    const listText = [
      'SHOPPING LIST',
      '=============',
      '',
      ...shoppingList.map(item => `‚òê ${item.quantity} ${item.unit} ${item.name}`),
      '',
      'Generated by Meal Planner App'
    ].join('\n');

    const blob = new Blob([listText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'shopping-list.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const groupedByCategory = shoppingList.reduce((acc, item) => {
    const category = item.category || 'Other';
    if (!acc[category]) {
      acc[category] = [];
    }
    acc[category].push(item);
    return acc;
  }, {});

  const categoryOrder = ['Produce', 'Meat & Seafood', 'Dairy', 'Pantry', 'Spices', 'Other'];
  const sortedCategories = Object.keys(groupedByCategory).sort((a, b) => {
    const aIndex = categoryOrder.indexOf(a);
    const bIndex = categoryOrder.indexOf(b);
    if (aIndex === -1 && bIndex === -1) return a.localeCompare(b);
    if (aIndex === -1) return 1;
    if (bIndex === -1) return -1;
    return aIndex - bIndex;
  });

  const completionPercentage = shoppingList.length > 0 ? (checkedItems.size / shoppingList.length) * 100 : 0;

  return (
    <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      {/* Header */}
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-8"
      >
        <div>
          <h1 className="text-4xl font-bold bg-gradient-to-r from-orange-600 to-red-600 bg-clip-text text-transparent mb-2">
            Shopping List
          </h1>
          <p className="text-gray-600">
            {shoppingList.length} items from {upcomingMeals.length} planned meals
          </p>
        </div>

        {shoppingList.length > 0 && (
          <div className="flex items-center space-x-3 mt-4 sm:mt-0">
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={copyToClipboard}
              className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-xl font-medium shadow-lg transition-colors flex items-center space-x-2"
            >
              <SafeIcon icon={FiCopy} className="w-4 h-4" />
              <span className="hidden sm:inline">Copy</span>
            </motion.button>

            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={downloadList}
              className="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-xl font-medium shadow-lg transition-colors flex items-center space-x-2"
            >
              <SafeIcon icon={FiDownload} className="w-4 h-4" />
              <span className="hidden sm:inline">Download</span>
            </motion.button>

            {checkedItems.size > 0 && (
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={clearChecked}
                className="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-xl font-medium shadow-lg transition-colors flex items-center space-x-2"
              >
                <SafeIcon icon={FiRefreshCw} className="w-4 h-4" />
                <span className="hidden sm:inline">Clear</span>
              </motion.button>
            )}
          </div>
        )}
      </motion.div>

      {/* Copy Success Message */}
      <AnimatePresence>
        {showCopied && (
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
            className="fixed top-24 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50"
          >
            Copied to clipboard!
          </motion.div>
        )}
      </AnimatePresence>

      {/* Completion Celebration Modal */}
      <AnimatePresence>
        {showCompletionModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
          >
            <motion.div
              initial={{ scale: 0.8, opacity: 0, y: 50 }}
              animate={{ scale: 1, opacity: 1, y: 0 }}
              exit={{ scale: 0.8, opacity: 0, y: 50 }}
              className="bg-white rounded-2xl p-8 shadow-2xl max-w-md mx-4 text-center"
            >
              <motion.div
                animate={{ rotate: [0, 10, -10, 0] }}
                transition={{ repeat: Infinity, duration: 2 }}
                className="w-20 h-20 bg-gradient-to-r from-green-400 to-emerald-500 rounded-full flex items-center justify-center mx-auto mb-6"
              >
                <SafeIcon icon={FiStar} className="w-10 h-10 text-white" />
              </motion.div>
              
              <h2 className="text-3xl font-bold text-gray-900 mb-4">
                üéâ Shopping Complete! üéâ
              </h2>
              
              <p className="text-gray-600 mb-6">
                Congratulations! You've completed your entire shopping list. 
                Time to cook some amazing meals! üë®‚Äçüç≥‚ú®
              </p>
              
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => setShowCompletionModal(false)}
                className="bg-gradient-to-r from-orange-500 to-red-500 text-white px-6 py-3 rounded-xl font-semibold shadow-lg"
              >
                Let's Cook! üöÄ
              </motion.button>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Shopping List */}
      {shoppingList.length > 0 ? (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
          className="space-y-6"
        >
          {/* Progress Bar */}
          <div className="bg-white rounded-2xl p-6 shadow-lg border border-orange-100">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-900">Progress</h3>
              <div className="flex items-center space-x-2">
                <span className="text-sm text-gray-600">
                  {checkedItems.size} of {shoppingList.length} items
                </span>
                {completionPercentage === 100 && (
                  <motion.div
                    initial={{ scale: 0 }}
                    animate={{ scale: 1 }}
                    className="flex items-center space-x-1 text-green-600"
                  >
                    <SafeIcon icon={FiCheck} className="w-4 h-4" />
                    <span className="text-sm font-medium">Complete!</span>
                  </motion.div>
                )}
              </div>
            </div>
            
            <div className="relative w-full bg-gray-200 rounded-full h-4 overflow-hidden">
              <motion.div
                initial={{ width: 0 }}
                animate={{ width: `${completionPercentage}%` }}
                className={`h-4 rounded-full transition-all duration-300 ${
                  completionPercentage === 100 
                    ? 'bg-gradient-to-r from-green-400 to-emerald-500' 
                    : 'bg-gradient-to-r from-orange-400 to-red-500'
                }`}
              />
              
              {completionPercentage === 100 && (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: [0, 1, 0] }}
                  transition={{ repeat: Infinity, duration: 1.5 }}
                  className="absolute inset-0 bg-white bg-opacity-30 rounded-full"
                />
              )}
            </div>
            
            <div className="mt-2 text-right text-sm font-medium text-gray-900">
              {Math.round(completionPercentage)}%
            </div>
          </div>

          {/* Categorized Items */}
          {sortedCategories.map((category) => (
            <motion.div
              key={category}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="bg-white rounded-2xl shadow-lg border border-orange-100 overflow-hidden"
            >
              <div className="p-4 bg-gradient-to-r from-orange-50 to-red-50 border-b border-orange-100">
                <h3 className="text-lg font-semibold text-gray-900">{category}</h3>
              </div>
              
              <div className="p-4 space-y-3">
                {groupedByCategory[category].map((item, index) => {
                  const isChecked = checkedItems.has(item.name);
                  return (
                    <motion.div
                      key={`${item.name}-${index}`}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: index * 0.05 }}
                      className={`flex items-center space-x-4 p-4 rounded-xl border-2 transition-all duration-200 ${
                        isChecked 
                          ? 'bg-green-50 border-green-200' 
                          : 'bg-gray-50 border-gray-200 hover:border-orange-300'
                      }`}
                    >
                      <motion.button
                        whileHover={{ scale: 1.1 }}
                        whileTap={{ scale: 0.9 }}
                        onClick={() => toggleItem(item.name)}
                        className={`w-6 h-6 rounded-full border-2 flex items-center justify-center transition-all duration-200 ${
                          isChecked 
                            ? 'bg-green-500 border-green-500' 
                            : 'border-gray-300 hover:border-orange-400'
                        }`}
                      >
                        {isChecked && (
                          <motion.div
                            initial={{ scale: 0 }}
                            animate={{ scale: 1 }}
                          >
                            <SafeIcon icon={FiCheck} className="w-4 h-4 text-white" />
                          </motion.div>
                        )}
                      </motion.button>

                      <div className="flex-1">
                        <div className={`font-medium transition-all duration-200 ${
                          isChecked ? 'line-through text-gray-500' : 'text-gray-900'
                        }`}>
                          {item.quantity} {item.unit} {item.name}
                        </div>
                        <div className="text-sm text-gray-500 mt-1">
                          Used in: {item.recipes.join(', ')}
                        </div>
                      </div>
                    </motion.div>
                  );
                })}
              </div>
            </motion.div>
          ))}
        </motion.div>
      ) : (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center py-16"
        >
          <SafeIcon icon={FiShoppingCart} className="w-24 h-24 text-gray-300 mx-auto mb-6" />
          <h3 className="text-2xl font-semibold text-gray-900 mb-2">No shopping list yet</h3>
          <p className="text-gray-600 mb-8">
            Plan some meals in your calendar to generate a shopping list
          </p>
        </motion.div>
      )}
    </div>
  );
};

export default ShoppingList;